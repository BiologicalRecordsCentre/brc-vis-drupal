<?php

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function brc_vis_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.brc_vis':
      return t('
        <h2>BRC visualise module</h2>
        <h3>What does it do?</h3>
        <p>
          This Drupal 9 module provides access to the BRC Atlas and BRC Charts Javscript libraries
          (<a href="https://github.com/BiologicalRecordsCentre/brc-atlas">Atlas repo</a> and
          <a href="https://github.com/BiologicalRecordsCentre/brc-charts">Charts repo</a>), 
          and their dependencies, from within a Drupal 8 website.
        </p>
        <h3>Instructions</h3>
        <p>ToDo...</p>
      ');
  }
}

/**
 * Implements hook_preprocess_node().
 */
function brc_vis_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Array to hold name of any library resources to load
  $vis_libraries = array();

  foreach ($node->getFieldDefinitions() as &$fd) {
    if(property_exists($fd, 'field_type')) {
      // Look for the brc_vis_libs field on the node
      if ($fd->getType() === 'brc_vis_libs') {
        // Get field value
        $vis_libs_specs = $load_lib_atlas = $node->get($fd->getName())->getValue();
        if (!empty($vis_libs_specs)) {
          // Cardinality is one, so get single value
          $vis_libs_spec = $vis_libs_specs[0];
          // Core BRC vis library checkboxes 
          if ($vis_libs_spec['brc_vis_lib_atlas'] === '1' || $vis_libs_spec['brc_vis_lib_charts'] === '1') {
            $vis_libraries[] = 'brcvis_core_common';
          }
          if ($vis_libs_spec['brc_vis_lib_atlas'] === '1') {
            $vis_libraries[] = 'brcvis_core_atlas';
          }
          if ($vis_libs_spec['brc_vis_lib_charts'] === '1') {
            $vis_libraries[] = 'brcvis_core_charts';
          }
          // Named custom libraries
          $custom_str = trim($vis_libs_spec['brc_vis_lib_custom']);
          if (!empty($custom_str)) {
            $customlibs = explode(',', $custom_str);
            foreach($customlibs as $customlib) {
              $vis_libraries[] = 'brcvis_custom_'.trim($customlib);
            }
          }
        }
      }
    }
  }
  // If any BRC vis libraries resolved, attempt to load them.
  if (!empty($vis_libraries)) {
    foreach($vis_libraries as $vis_library) {
      //dpm('brc_vis/'.$vis_library);
      $variables['#attached']['library'][] = 'brc_vis/'.$vis_library;
    }
    // Make the module path available to JS
    $variables['#attached']['drupalSettings']['brc_vis']['path'] = drupal_get_path('module', 'brc_vis');
  }

  // If node type is brcvis, carry out node-type specific stuff
  if ($node->getType() === 'brcvis') {

    // Add div where visualisation will be generated
    // JS libraries will place visualisation in here.
    $variables['content']['brc-vis-content'] = array(
      '#type' => 'markup',
      '#markup' => '<div id="brc-vis-content"></div>',
      '#weight' => 200,
    );

    // Make any config options available to JS
    $configopts=$node->get('field_brcvis_configopt')->getValue();
    $config=array();
    foreach($configopts as $co) {
      // First word of configopt is option name,
      // the rest is value    
      $tokens = explode(' ', trim($co['value']));
      $opt = array_shift($tokens);
      $value = implode(' ', $tokens);
      $config += [
        $opt => $value,
      ];
    }
    $variables['#attached']['drupalSettings']['brc_vis']['config'] = $config;

    // Indicia XML reports and ES queries
    $reports=$node->get('field_brcvis_report')->getValue();
    $esqueries=$node->get('field_brcvis_esquery')->get(0)->getValue()['value'] === '1';

    // Connect with client_helpers if necessary
    if (count($reports) > 0 || $esqueries) {

      // We don't automatically include client_helpers as a sub-module in this module because 1) it may not always
      // be required and 2) if iForm is already installed and used, it can cause this error:
      // Fatal error: Cannot declare class helper_base, because the name is already in use in /code/modules/custom/iform/client_helpers/helper_base.php on line 235
      // So instead check here to see if iForm is installed and, if so, use client_helpers from there. If not, check
      // to see if included in this module and, if so, use client_helpers from there. Otherwise, end gracefully with a message.
      $client_helpers = '';
      if (\Drupal::moduleHandler()->moduleExists('iform')) {
        $iform = drupal_get_path('module', 'iform');
        if ($iform !== '') {
          $client_helpers = DRUPAL_ROOT.'/'.$iform.'/client_helpers';
        }
      }
      if ($client_helpers === '') {
        $module_path=drupal_get_path('module', 'brc_vis');
        if (is_dir(DRUPAL_ROOT.'/'.$module_path.'/client_helpers')) {
          $client_helpers = 'client_helpers';
        }
      }
      if ($client_helpers === '') {
        \Drupal::messenger()->addMessage(t('The Indicia client_helpers library is not available. Either install the iForm module or include client_helpers in this module.'));
      } else {
        require_once $client_helpers.'/helper_base.php';
      }
    }

    // If Indicia report specified
    if (count($reports) > 0 && $client_helpers !== '') {

      $config = \Drupal::config('brc_vis.settings');
      $warehouse = $config->get('warehouse');

      $indicia_use = True;
      if (!$warehouse || !$warehouse['url'] || !$warehouse['id'] || !$warehouse['password']) {
        \Drupal::messenger()->addWarning(t('You must set all the Warehouse configuration options to use this page.'));
        //$warehouse_connected = False;
        $indicia_use = False;
      }
    
      // Run any reports specfied in the field_brcvis_report fields
      // and attach the results to the JS data
      if ($indicia_use) {
        helper_base::$base_url = trim($warehouse['url']);
        require_once $client_helpers.'/report_helper.php';
        try {
          $read_auth=report_helper::get_read_auth(trim($warehouse['id']), trim($warehouse['password']));
          //dpm($read_auth);
        }
        catch(Exception $e) {
          \Drupal::messenger()->addMessage(t('Failed to login to Warehouse ' . $warehouse['url'] . ' with ID ' . $warehouse['id'] . '.'));
          $indicia_use = False;
        }
      }
      if ($indicia_use) {
        // Get Indicia user ID if available
        $account = \Drupal::currentUser();
      
        if (!function_exists('user_load')) {
          function user_load($uid, $reset = FALSE) {
            if ($reset) {
              \Drupal::entityManager()
                ->getStorage('user')
                ->resetCache([
                $uid,
              ]);
            }
            return \Drupal\user\Entity\User::load($uid);
          }
        }
        $user = user_load($account->id());		

        if ($user->hasField('field_indicia_user_id')) {
          $indiciaUserIdValue = $user->get('field_indicia_user_id')->getValue();
          if (count($indiciaUserIdValue) === 0) {
            $indiciaUserId = NULL;
          } else {
            $indiciaUserId = $user->$indiciaUserIdValue[0]['value'];
          }
        } else {
          $indiciaUserId = NULL;
        }
        // \Drupal::logger('brc_vis')->notice('Linked indicia userId: '.$indiciaUserId);

        $data=array();
        foreach($reports as $report) {
          $opts=array(
            'mode' => 'report',
            'dataSource' => trim($report['value']),
            'readAuth' => $read_auth,
            'sharing' => 'me',
            'userId' => $indiciaUserId,							
          );
          $path = explode('/', trim($report['value']));
          try {
            report_helper::request_report($response, $opts, $currentParamValues, false);
            if (is_null($response['records'])) {
              \Drupal::messenger()->addMessage(t('Failed to retrieve an data for report ' . $report['value'] . '. Check warehouse credentials and report path.'), 'warning');
              drupal_set_message($e->getMessage(), 'error');
              $data[end($path)] = 'retrieval error';
            } else {
              $data[end($path)] = $response['records'];
            }
          }
          catch(Exception $e) {
            \Drupal::messenger()->addMessage(t('Failed to get data for report ' . $report['value'] . '.'));
            \Drupal::messenger()->addMessage(t($e->getMessage()));
            $data[end($path)] = 'retrieval error';
          }
        }
        $variables['#attached']['drupalSettings']['brc_vis']['data'] = json_encode($data);
      }
    
      // Ensure the cache varies correctly.
      $variables['#cache']['max-age'] = 0;
      //$variables['#cache']['contexts'][] = 'user';  
    }

    // If Indicia ES query specified
    if ($esqueries && $client_helpers !== '') {
      require_once $client_helpers.'/ElasticsearchReportHelper.php';
      ElasticsearchReportHelper::enableElasticsearchProxy();
      // Ensure the cache varies correctly.
      $variables['#cache']['max-age'] = 0;
    }
  }
}

/**
 * Implements hook_library_info_alter().
 * 
 * Add dynamic library definitions.
 *
 * Here we are using this hook to dynamically load any javascript files placed
 * in the /libraries/brcvis folder's subfolders on the Drupal website. We use these folder
 * to place any data processing functions specific to the site. The name of the 
 * subfolder is used to create the library resource which can then be loaded by name.
 *
 * This is used in preference to the hook_library_info_build so that it can react
 * dynamically to new library files being added in.
 *
 */
function brc_vis_library_info_alter(&$libraries, $extension) {
  if ($extension == 'brc_vis') {
    if (is_dir('./libraries/brcvis')) {
      $data_processing_dir = \Drupal::service('file_system')->scanDirectory('./libraries/brcvis', '(.*?)', array('recurse'=>FALSE)); 
      foreach ($data_processing_dir as $dir=>$obj) {
        if (is_dir($dir)) {
          if (!array_key_exists('brcvis_custom_'.basename($dir), $libraries)) {
            $libraries['brcvis_custom_'.basename($dir)] = [];
            $libraries['brcvis_custom_'.basename($dir)]['css'] = [];
            $libraries['brcvis_custom_'.basename($dir)]['css']['layout'] = [];
            $libraries['brcvis_custom_'.basename($dir)]['js'] = [];
          }
          $lib_css = \Drupal::service('file_system')->scanDirectory($dir, '/\\.css$/'); 
          foreach ($lib_css as $file=>$obj) {
            $libraries['brcvis_custom_'.basename($dir)]['css']['layout'] += [
              // Remove leading dot so that resource is relative to website root - not module
              substr($file, 1) => [],
            ];
          };
          $lib_js = \Drupal::service('file_system')->scanDirectory($dir, '/\\.js$/'); 
          foreach ($lib_js as $file=>$obj) {
            $libraries['brcvis_custom_'.basename($dir)]['js'] += [
              // Remove leading dot so that resource is relative to website root - not module
              substr($file, 1) => [],
            ];
          }
        }
      }
    }
  }
}