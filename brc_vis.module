<?php

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function brc_vis_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.brc_vis':
      return t('
        <h2>BRC visualise module</h2>
        <h3>What does it do?</h3>
        <p>
          This Drupal 8 module provides access to the BRC Atlas and BRC Charts Javscript libraries
          (<a href="https://github.com/BiologicalRecordsCentre/brc-atlas">Atlas repo</a> and
          <a href="https://github.com/BiologicalRecordsCentre/brc-charts">Charts repo</a>), 
          and their dependencies, from within a Drupal 8 website.
        </p>
        <p>
          It adds the functionality to enable maps to be added to any Drupal content type
          through HTML tags inserted into the pages source. 
        </p>
        <h3>Instructions</h3>
        <p>ToDo...</p>
      ');
  }
}

/**
 * Implements hook_preprocess_node().
 */
function brc_vis_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Retrieve page alias, even if current path doesn't use alias
  //$current_path = \Drupal::service('path.current')->getPath();
  //$alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  // Check alias and load library it contains the string '-brcvis-'
  //if (strpos($alias, '-brcvis-')  !== false) {

  // If node type is brcvis, carry out node-type specific stuff
  if ($node->getType() === 'brcvis') {

    // Make the module path available to JS
    $variables['#attached']['drupalSettings']['brc_vis']['path'] = drupal_get_path('module', 'brc_vis');

    // Attach the libraries included with this module (as defined
    // in brc_vis.libraries.yml)
    $variables['#attached']['library'][] = 'brc_vis/brcvis';
    // Attach any data processing libraries added in the
    // Drupal website's 'libraries/brcvis' folder.
    // (See _library_info_build hook in this module file.)
    $variables['#attached']['library'][] = 'brc_vis/dataproc';

    // Make any config options available to JS
    $configopts=$node->get('field_brcvis_configopt')->getValue();
    $config=array();
    foreach($configopts as $co) {
      // First word of configopt is option name,
      // the rest is value    
      $tokens = explode(' ', trim($co['value']));
      $opt = array_shift($tokens);
      $value = implode(' ', $tokens);
      $config += [
        $opt => $value,
      ];
    }
    $variables['#attached']['drupalSettings']['brc_vis']['config'] = $config;

    // Run any reports specfied in the field_brcvis_report fields
    // and attach the results to the JS data
    $config = \Drupal::config('brc_vis.settings');
    $warehouse = $config->get('warehouse');
    //dpm($warehouse);

    $run = True;
    if (!$warehouse['url'] || !$warehouse['id'] || !$warehouse['password']) {
      drupal_set_message('You must set all the Warehouse configuration options to use this page.', 'error');
      $run = False;
    }
    if ($run) {

      // If iform is installed, use client_helpers from there to avoid this message:
      // Fatal error: Cannot declare class helper_base, because the name is already in use in /code/modules/custom/iform/client_helpers/helper_base.php on line 235
      $iform = drupal_get_path('module', 'iform');
      if ($iform === '') {
        $client_helpers = 'client_helpers';
      } else {
        $client_helpers = DRUPAL_ROOT.'/'.$iform.'/client_helpers';
      }

      require_once $client_helpers.'/helper_base.php';
      helper_base::$base_url = trim($warehouse['url']);
      require_once $client_helpers.'/report_helper.php';
      try {
        $read_auth=report_helper::get_read_auth(trim($warehouse['id']), trim($warehouse['password']));
      }
      catch(Exception $e) {
        drupal_set_message('Failed to login to Warehouse ' . $warehouse['url'] . ' with ID ' . $warehouse['id'] . '.', 'error');
        $run = False;
      }
    }
    if ($run) {
      // Get Indicia user ID if available
      $account = \Drupal::currentUser();
      $user = user_load($account->id());
      if ($user->hasField('field_indicia_user_id')) {
        $indiciaUserId = $user->get('field_indicia_user_id')->getValue()[0]['value'];
      } else {
        $indiciaUserId = NULL;
      }
      if (is_null($indiciaUserId)) {
        dpm('No indicia user');
      }

      $reports=$node->get('field_brcvis_report')->getValue();
      $data=array();
      foreach($reports as $report) {
        $opts=array(
          'mode' => 'report',
          'dataSource' => trim($report['value']),
          'readAuth' => $read_auth,
          'sharing' => 'me',
          'userId' => $indiciaUserId,
        );
        $path = explode('/', trim($report['value']));
        try {
          report_helper::request_report($response, $opts, $currentParamValues, false);
          if (is_null($response['records'])) {
            drupal_set_message('Failed to retrieve an data for report ' . $report['value'] . '. Check warehouse credentials and report path.', 'warning');
            $data[end($path)] = 'retrieval error';
          } else {
            $data[end($path)] = $response['records'];
          }
        }
        catch(Exception $e) {
          drupal_set_message('Failed to get data for report ' . $report['value'] . '.', 'error');
          drupal_set_message($e->getMessage(), 'error');
          $data[end($path)] = 'retrieval error';
        }
      }
      $variables['#attached']['drupalSettings']['brc_vis']['data'] = json_encode($data);
    }
  }
}

/**
 * Implements hook_library_info_build().
 * 
 * Add dynamic library definitions.
 *
 * Here we are using this hook to dynamically load any javascript files placed
 * in the /libraries/brcvis folder on the Drupal website. We use this folder
 * to place any data processing functions specific to the site. 
 *
 * @return array[]
 *   An array of library definitions to register, keyed by library ID. The
 *   library ID will be prefixed with the module name automatically.
 *
 * @see core.libraries.yml
 * @see hook_library_info_alter()
 */
function brc_vis_library_info_build() {
  $libraries = [];
  $libraries['dataproc'] = [];
  $libraries['dataproc']['js'] = [];

  $data_processing_libs = file_scan_directory('./libraries/brcvis', '/\\.js$/');
  
  print('libs');
  print($data_processing_libs);

  foreach ($data_processing_libs as $file=>$obj) {
    $libraries['dataproc']['js'] += [
      // Remove leading dot so that resource is relative to website root - not module
      substr($file, 1) => [],
    ];
  }
  return $libraries;
}
