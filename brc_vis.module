<?php

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function brc_vis_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.brc_vis':
      return t('
        <h2>BRC visualise module</h2>
        <h3>What does it do?</h3>
        <p>
          This Drupal 9 module provides access to the BRC Atlas and BRC Charts Javscript libraries
          (<a href="https://github.com/BiologicalRecordsCentre/brc-atlas">Atlas repo</a> and
          <a href="https://github.com/BiologicalRecordsCentre/brc-charts">Charts repo</a>), 
          and their dependencies, from within a Drupal 8 website.
        </p>
        <h3>Instructions</h3>
        <p>ToDo...</p>
      ');
  }
}

/**
 * Implements hook_preprocess_node().
 */
function brc_vis_preprocess_node(&$variables) {

  // Initialise an associative array (fns) for javascript custom libs to
  // place functions.
  $variables['#attached']['drupalSettings']['brc_vis']['fns']['init'] = '';
  $variables['#attached']['drupalSettings']['brc_vis']['data']['init'] = '';

  // Current node
  $node = $variables['node'];
  
  // Load libraries if brc_vis_libs is present
  foreach ($node->getFieldDefinitions() as &$fd) {
    if(property_exists($fd, 'field_type')) {
      // Look for the brc_vis_libs field on the node
      if ($fd->getType() === 'brc_vis_libs') {
        // Get field value
        $vis_libs_specs = $load_lib_atlas = $node->get($fd->getName())->getValue();
        if (!empty($vis_libs_specs)) {
          // Cardinality is one, so get single value
          $vis_libs_spec = $vis_libs_specs[0];
          // Core BRC vis library checkboxes 
          $atlas = intval($vis_libs_spec['brc_vis_lib_atlas']);
          $charts = intval($vis_libs_spec['brc_vis_lib_charts']);
          // Named custom libraries
          $custom_str = trim($vis_libs_spec['brc_vis_lib_custom']);
          if (!empty($custom_str)) {
            $customlibs = explode(',', $custom_str);
          }
          else {
            $customlibs = [];
          }
          loadLibs($variables, $atlas, $charts, $customlibs);
        }
      }
    }
  }

  // If node type is brcvis, carry out node-type specific stuff
  if ($node->getType() === 'brcvis') {

    // Add div where visualisation will be generated
    // JS libraries will place visualisation in here.
    $variables['content']['brc-vis-content'] = array(
      '#type' => 'markup',
      '#markup' => '<div id="brc-vis-content"></div>',
      '#weight' => 200,
    );

    // Get config options
    $configopts_aa=$node->get('field_brcvis_configopt')->getValue();
    // Change from associative array to array

    $configopts=array();
    foreach($configopts_aa as $co) {
      array_push($configopts, $co['value']);
    }

    // Get Indicia XML reports and ES queries
    $reports_aa=$node->get('field_brcvis_report')->getValue();
    // Change from associative array to array
    $reports=array();
    foreach($reports_aa as $rep) {
      array_push($reports, $rep['value']);
    }

    $esqueries=intval($node->get('field_brcvis_esquery')->get(0)->getValue()['value']);

    parseConfig($variables, $configopts, $reports, $esqueries, NULL);
  }
}

/**
 * Implements hook_preprocess_block().
 */
function brc_vis_preprocess_block__brc_taxon_select(&$variables) {

  $variables['#attached']['library'][] = 'brc_vis/brcvis_core_common';

  // Make warehouse URL available to JS code.
  $ret = getWarehouse();
  $variables['#attached']['drupalSettings']['brc_vis']['warehouse'] = $ret['warehouse']['url'];
}

/**
 * Implements hook_preprocess_block().
 */
function brc_vis_preprocess_block__brc_chart(&$variables) {

  $config = $variables['configuration'];

  if (!empty($config['brc_vis_charts_lib'])) {
    $charts = intval($config['brc_vis_charts_lib']);
  }
  else {
    $charts = 0;
  }

  if (!empty($config['brc_vis_atlas_lib'])) {
    $atlas = intval($config['brc_vis_atlas_lib']);
  }
  else {
    $atlas = 0;
  }
  
  if (!empty($config['brc_vis_indicia_custom_libs'])) {
    $custom_libs = $config['brc_vis_indicia_custom_libs'];
    $customlibs = explode(',', $custom_libs);
  }
  else {
    $customlibs = [];
  }

  if (!empty($config['brc_vis_js_config'])) {
    $configoptstext = trim($config['brc_vis_js_config']);
    $configopts = explode(PHP_EOL, $configoptstext);
  }
  else {
    $configopts = [];
  }

  if (!empty($config['brc_vis_indicia_reports'])) {
    $reportstext = trim($config['brc_vis_indicia_reports']);
    $reports = explode(PHP_EOL, $reportstext);
  }
  else {
    $reports = [];
  }

  if (!empty($config['brc_vis_indicia_es'])) {
    $esqueries = intval(trim($config['brc_vis_indicia_es']));
  }
  else {
    $esqueries = 0;
  }

  if (!empty($config['brc_vis_div_id'])) {
    $variables['#attached']['drupalSettings']['brc_vis']['blocks'] = TRUE;
    $divid = $config['brc_vis_div_id'];
    loadLibs($variables, $atlas, $charts, $customlibs);
    parseConfig($variables, $configopts, $reports, $esqueries, $divid);
  }
}

function parseConfig(&$variables, $configopts, $reports, $esqueries, $divid) {

  // Make any config options available to JS
  $config=array();
  if (!empty($configopts)) {
    foreach($configopts as $co) {
      // First word of configopt is option name,
      // the rest is value    
      $tokens = explode(' ', trim($co));
      $opt = array_shift($tokens);
      $value = implode(' ', $tokens);
      $config += [
        $opt => $value,
      ];
    }
  }

  if (!is_null($divid)) {
    // Config for block
    $variables['#attached']['drupalSettings']['brc_vis']['config'][$divid] = $config;

    //dpm($divid);
    //dpm($variables['#attached']['drupalSettings']['brc_vis']['config']);
  }
  else {
    // Config for content type
    $variables['#attached']['drupalSettings']['brc_vis']['config'] = $config;
  }

  // Get warehouse configuration.
  $ret = getWarehouse();
  $indicia_use = $ret['indicia_use'];
  $warehouse = $ret['warehouse'];

  // Indicia XML reports and ES queries
  // Connect with client_helpers if necessary
  $client_helpers = '';
  if (count($reports) > 0 || $esqueries === 1) {

    $module_path=drupal_get_path('module', 'brc_vis');
    require_once DRUPAL_ROOT.'/'.$module_path.'/brc_vis_helper.php';
    $client_helpers=getClientHelperPath();

    if ($client_helpers === '') {
      \Drupal::messenger()->addMessage(t('The Indicia client_helpers library is not available. Either install the iForm module or include client_helpers in this module.'));
    } else {
      require_once $client_helpers.'/helper_base.php';
    }
  }

  // Get Indicia user ID if logged in
  $indiciaUserId = NULL;
  if ($indicia_use && $client_helpers !== '') {
    // Get Indicia user ID if available
    $account = \Drupal::currentUser();
    
    if (!function_exists('user_load')) {
      function user_load($uid, $reset = FALSE) {
        if ($reset) {
          \Drupal::entityManager()
            ->getStorage('user')
            ->resetCache([
            $uid,
          ]);
        }
        return \Drupal\user\Entity\User::load($uid);
      }
    }
    $user = user_load($account->id());		

    if ($user->hasField('field_indicia_user_id')) {
      $indiciaUserIdValue = $user->get('field_indicia_user_id')->getValue();
      if (count($indiciaUserIdValue) > 0) {
        $indiciaUserId = $user->$indiciaUserIdValue[0]['value'];
      }
    }

    if (!is_null($indiciaUserId)) {
      $variables['#attached']['drupalSettings']['brc_vis']['indiciaUserId'] = $indiciaUserId;
    }
    else {
      $variables['#attached']['drupalSettings']['brc_vis']['indiciaUserId'] = '';
    }
  }

  // If Indicia report specified
  if (count($reports) > 0 && $client_helpers !== '') {

    // Run any reports specfied in the field_brcvis_report fields
    // and attach the results to the JS data
    if ($indicia_use) {
      helper_base::$base_url = trim($warehouse['url']);
      require_once $client_helpers.'/report_helper.php';
      try {
        $read_auth=report_helper::get_read_auth(trim($warehouse['id']), trim($warehouse['password']));
        //dpm($read_auth);
      }
      catch(Exception $e) {
        \Drupal::messenger()->addMessage(t('Failed to login to Warehouse ' . $warehouse['url'] . ' with ID ' . $warehouse['id'] . '.'));
        $indicia_use = False;
      }
   
      $data=array();
      foreach($reports as $report) {
        $opts=array(
          'mode' => 'report',
          'dataSource' => trim($report),
          'readAuth' => $read_auth,
          'sharing' => 'me',
          'userId' => $indiciaUserId,							
        );
        $path = explode('/', trim($report));
        try {
          report_helper::request_report($response, $opts, $currentParamValues, false);
          if (!array_key_exists('records', $response) || is_null($response['records'])) {
            \Drupal::messenger()->addMessage(t('Failed to retrieve any data for report ' . $report . '. Check warehouse credentials and report path.'), 'warning');
            // \Drupal::messenger()->addMessage(t($e->getMessage()));
            $data[end($path)] = 'retrieval error';
          } else {
            $data[end($path)] = $response['records'];
          }
        }
        catch(Exception $e) {
          \Drupal::messenger()->addMessage(t('Failed to get data for report ' . $report . '.'));
          \Drupal::messenger()->addMessage(t($e->getMessage()));
          $data[end($path)] = 'retrieval error';
        }
      }

      if (!is_null($divid)) {
        // XML report data for block
        $variables['#attached']['drupalSettings']['brc_vis']['data'][$divid] = json_encode($data);
      }
      else {
        // XML report data for content type
        $variables['#attached']['drupalSettings']['brc_vis']['data'] = json_encode($data);
      }
    }
    else {
      \Drupal::messenger()->addWarning(t('You must set all the Warehouse configuration options to use Indicia reports.'));
    }
  
    // Ensure the cache varies correctly.
    $variables['#cache']['max-age'] = 0;
    //$variables['#cache']['contexts'][] = 'user';  
  }

  // If Indicia ES query specified
  if ($esqueries === 1 && $client_helpers !== '') {
    try {
      require_once $client_helpers.'/ElasticsearchReportHelper.php';
      \ElasticsearchReportHelper::enableElasticsearchProxy();
      //\Drupal::messenger()->addMessage(t('Indicia ES proxy enabled successfully.'));
    }
    catch(Exception $e) {
      \Drupal::messenger()->addMessage(t('Failed to enable Indicia ES proxy.'), 'warning');
    }
    // Ensure the cache varies correctly.
    $variables['#cache']['max-age'] = 0;
  }
}

function getWarehouse() {
  // Get warehouse configuration. If the iform module is installed,
  // get the settings from there. Otherwise get from the brc-vis-drupal module.
  $iform = drupal_get_path('module', 'iform');
  if ($iform !== '') {
    // Get warehouse config from iform and reformat into 
    // warehouse array (as configured in brc-vis-module) for
    // convenience in subsequent code.
    $config = \Drupal::config('iform.settings');
    $iformUrl = $config->get('base_url');
    $iformId = $config->get('website_id');
    $iformPassword = $config->get('password');

    if (!$iformUrl || !$iformId || !$iformPassword) {
      $indicia_use = False;
    }
    else {
      $indicia_use = True;
      $warehouse = array('url'=>$iformUrl, 'id'=>$iformId, 'password'=>$iformPassword);
    }
  }
  else {
    $config = \Drupal::config('brc_vis.settings');
    $warehouse = $config->get('warehouse');
    $indicia_use = True;
    if (!$warehouse || !$warehouse['url'] || !$warehouse['id'] || !$warehouse['password']) {
      $indicia_use = False;
    }
  }
  return array('indicia_use'=>$indicia_use, 'warehouse'=>$warehouse);
}

function loadLibs(&$variables, $atlas, $charts, $customlibs) {

  // Array to hold name of any library resources to load
  $vis_libraries = array();

  // Core BRC vis library checkboxes 
  if ($atlas === 1 || $charts === 1) {
    $vis_libraries[] = 'brcvis_core_common';
  }
  if ($atlas === 1) {
    $vis_libraries[] = 'brcvis_core_atlas';
  }
  if ($charts === 1) {
    $vis_libraries[] = 'brcvis_core_charts';
  }

  // Named custom libraries
  if (!empty($customlibs)) {
    foreach($customlibs as $customlib) {
      $vis_libraries[] = 'brcvis_custom_'.trim($customlib);
    }
  }

  // If any BRC vis libraries resolved, attempt to load them.
  if (!empty($vis_libraries)) {
    foreach($vis_libraries as $vis_library) {
      $variables['#attached']['library'][] = 'brc_vis/'.$vis_library;
    }
    // Make the module path available to JS
    $variables['#attached']['drupalSettings']['brc_vis']['path'] = drupal_get_path('module', 'brc_vis');
  }
}

/**
 * Implements hook_library_info_alter().
 * 
 * Add dynamic library definitions.
 *
 * Here we are using this hook to dynamically load any javascript files placed
 * in the /libraries/brcvis folder's subfolders on the Drupal website. We use these folder
 * to place any data processing functions specific to the site. The name of the 
 * subfolder is used to create the library resource which can then be loaded by name.
 *
 * This is used in preference to the hook_library_info_build so that it can react
 * dynamically to new library files being added in.
 *
 */
function brc_vis_library_info_alter(&$libraries, $extension) {
  if ($extension == 'brc_vis') {
    if (is_dir('./libraries/brcvis')) {
      $data_processing_dir = \Drupal::service('file_system')->scanDirectory('./libraries/brcvis', '(.*?)', array('recurse'=>FALSE)); 
      foreach ($data_processing_dir as $dir=>$obj) {
        if (is_dir($dir)) {
          if (!array_key_exists('brcvis_custom_'.basename($dir), $libraries)) {
            $libraries['brcvis_custom_'.basename($dir)] = [];
            $libraries['brcvis_custom_'.basename($dir)]['css'] = [];
            $libraries['brcvis_custom_'.basename($dir)]['css']['layout'] = [];
            $libraries['brcvis_custom_'.basename($dir)]['js'] = [];
          }
          $lib_css = \Drupal::service('file_system')->scanDirectory($dir, '/\\.css$/'); 
          foreach ($lib_css as $file=>$obj) {
            $libraries['brcvis_custom_'.basename($dir)]['css']['layout'] += [
              // Remove leading dot so that resource is relative to website root - not module
              substr($file, 1) => [],
            ];
          };
          $lib_js = \Drupal::service('file_system')->scanDirectory($dir, '/\\.js$/'); 
          foreach ($lib_js as $file=>$obj) {
            $libraries['brcvis_custom_'.basename($dir)]['js'] += [
              // Remove leading dot so that resource is relative to website root - not module
              substr($file, 1) => [],
            ];
          }
        }
      }
    }
  }
}